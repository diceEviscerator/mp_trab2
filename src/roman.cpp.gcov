        -:    0:Source:roman.cpp
        -:    0:Graph:roman.gcno
        -:    0:Data:roman.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:# include "roman.h"
        -:    2:
      114:    3:void indexator (char *numb, int size, int *vector_index){//converte a string num vetor de inteiros com um numero associado ao valor de cada caractere
        -:    4:  int i;
        -:    5:  char c_numb;
        -:    6:
      873:    7:  for (i=0;i<=size; i++) {
      759:    8:    c_numb=numb[i];
      759:    9:    switch (c_numb) {
        -:   10:      case 0:
      114:   11:        vector_index[i]=0;
      114:   12:        break;
        -:   13:      case 73:
      151:   14:        vector_index[i]=1;
      151:   15:        break;
        -:   16:      case 86:
       64:   17:        vector_index[i]=2;
       64:   18:        break;
        -:   19:      case 88:
      134:   20:        vector_index[i]=3;
      134:   21:        break;
        -:   22:      case 76:
       53:   23:        vector_index[i]=4;
       53:   24:        break;
        -:   25:      case 67:
      103:   26:        vector_index[i]=5;
      103:   27:        break;
        -:   28:      case 68:
       35:   29:        vector_index[i]=6;
       35:   30:        break;
        -:   31:      case 77:
      105:   32:        vector_index[i]=7;
      105:   33:        break;
        -:   34:      default:
    #####:   35:        vector_index[i]=-1;
    #####:   36:        break;
        -:   37:    }
        -:   38:  }
      114:   39:  return;
        -:   40:}
        -:   41:
       19:   42:int adder (int *vector_index, int size) {//soma o valor de todos os caracteres da string
       19:   43:  int i, result=0;
        -:   44:
      134:   45:  for (i=0;i<=size; i++) {
      115:   46:    switch (vector_index[i]) {
        -:   47:      case 1: 
       21:   48:        result=result+1;
       21:   49:        break;
        -:   50:      case 2:
       11:   51:        result=result+5;
       11:   52:        break;
        -:   53:      case 3:
       16:   54:        result=result+10;
       16:   55:        break;
        -:   56:      case 4:
        8:   57:        result=result+50;
        8:   58:        break;
        -:   59:      case 5:
       18:   60:        result=result+100;
       18:   61:        break;
        -:   62:      case 6:
        6:   63:        result=result+500;
        6:   64:        break;
        -:   65:      case 7:
       16:   66:        result=result+1000;
       16:   67:        break;
        -:   68:      default:
       19:   69:        result=result+0;
       19:   70:        break;
        -:   71:    }
        -:   72:  }
       19:   73:  return result;
        -:   74:}
        -:   75:
       19:   76:int subtracter (int *vector_index, int size, int result) {//detecta subtrações necessárias e as realiza
        -:   77:  int i;
        -:   78:
      134:   79:  for (i=0;i<=size;i++) {
      115:   80:    if (i>0) {
       96:   81:      if ((vector_index[i])>(vector_index[i-1])) {
        8:   82:        switch (vector_index[i]) {
        -:   83:          case 2:
        1:   84:            result=result-2;
        1:   85:            break;
        -:   86:          case 3:
    #####:   87:            result=result-2;
    #####:   88:            break;
        -:   89:          case 4:
        2:   90:            result=result-20;
        2:   91:            break;
        -:   92:          case 5:
    #####:   93:            result=result-20;
    #####:   94:            break;
        -:   95:          case 6:
        2:   96:            result=result-200;
        2:   97:            break;
        -:   98:          case 7:
        3:   99:            result=result-200;
        3:  100:            break;
        -:  101:          default:
    #####:  102:            result=result-0;
    #####:  103:            break;
        -:  104:        }
        -:  105:      }
        -:  106:    }
        -:  107:  }
       19:  108:  return result;
        -:  109:}
        -:  110:
       29:  111:int transf_roman (char *roman_number) {
       29:  112:  int result=0, size=strlen(roman_number), i=0, j=0, equal_char=0,
       29:  113:     vector_index[31], subtract_case=0;
        -:  114:
       29:  115:  if (size<=0) {
        1:  116:    printf("Erro: string vazia\n"); return -1;
        -:  117:  } else {
      133:  118:    for (i=0;i<size; i++) {//detecta strings com caracteres inválidos
      114:  119:      if ((roman_number[i]!='I')&&(roman_number[i]!='V')&&(roman_number[i]!='X')
       50:  120:          &&(roman_number[i]!='L')&&(roman_number[i]!='C')
       23:  121:          &&(roman_number[i]!='D')&&(roman_number[i]!='M')) {
        1:  122:        printf("Erro: string invalida, caracteres invalidos na string\n");
        1:  123:        return -1;
        -:  124:      }
      113:  125:      indexator(roman_number, size, vector_index);
      113:  126:      if (i>0) {//impede que o programa tente acessar partes inexistentes do vetor
       86:  127:        if (roman_number[i]==roman_number[i-1]) {//parte conta casos de caracteres iguais seguidos, indica um erro se houverem muitos
       27:  128:          equal_char++;
       27:  129:          if (equal_char>=3) {
        1:  130:            printf("Erro: string invalida, muitos caracteres iguais seguidos\n");
        1:  131:            return -1;
        -:  132:          }
       26:  133:          if ((equal_char!=0)&&(vector_index[i]<vector_index[i+1])) {// usa da parte anterior para evitar strings como "IIV"
        1:  134:            printf("Erro: string invalida, caractere menor seguido de caractere subtraido\n");
        1:  135:            return -1;
        -:  136:          }
        -:  137:        } else {
       59:  138:          equal_char=0;//reinicia a contagem de caracteres iguais para o caso de novos caracteres repetidos indevidamente
        -:  139:        }
        -:  140:      }
      111:  141:      if (vector_index[i+1]-vector_index[i]>2) {//detecta erros de numeros seguidos serem muito distantes
        1:  142:        printf("Erro: string invalida, subtração impossivel\n");
        1:  143:        return -1;
        -:  144:      }
      110:  145:      if ((vector_index[i+1]==vector_index[i])&&(vector_index[i]%2==0)) {//impede strings com "VV", ou "LL"
        1:  146:        printf("Erro: string invalida, 'VV', 'LL' ou 'DD'\n");
        1:  147:        return -1;
        -:  148:      }
      109:  149:      if ((vector_index[i]%2==0)&&(vector_index[i+1]%2!=0)//impede casos de "VX"
       17:  150:          &&(vector_index[i+1]>vector_index[i])) {
        1:  151:        printf("Erro: string invalida, subtração com V, L ou D\n");
        1:  152:        return -1;
        -:  153:      }
      108:  154:      if (i>0) {
       84:  155:        if ((vector_index[i])>(vector_index[i-1])) {//impede numeros já subtraídos de serem usados novamente como, caso haja um IX, um novo X não pode ocorrer novamente
       10:  156:          subtract_case=vector_index[i];//a linha acima detecta casos em que ocorreriam uma subtração, aqui, o caractere cujo valor irá ser subtraído é armazenado
       37:  157:          for (j=i+1;j<=size;j++){//percorre o vetor buscando por caracteres iguais após já subtraído
       28:  158:            if (subtract_case==vector_index[j]) {
        1:  159:              printf("Erro: string invalida, numero já subtraido\n");
        1:  160:              return -1;
        -:  161:            }
        -:  162:          }
        -:  163:        }
       83:  164:        if ((vector_index[i-1]>vector_index[i])//caso de um numero menor entre dois maiores
       49:  165:            &&(vector_index[i]<vector_index[i+1])
        7:  166:            &&(vector_index[i-1]<vector_index[i+1])) {
        1:  167:          printf("Erro: string invalida, numero menor entre dois numeros maiores, sendo o segundo maior\n");
        1:  168:          return -1;
        -:  169:        }
       82:  170:        if ((vector_index[i-1]<vector_index[i])//caso de um numero maior entre dois maiores iguais
        9:  171:            &&(vector_index[i+1]<vector_index[i])
        9:  172:            &&(vector_index[i-1]==vector_index[i+1])){
        1:  173:          printf("Erro: string invalida, numero maior entre numeros menores e iguais\n");
        1:  174:          return -1;
        -:  175:        }
        -:  176:      }
        -:  177:    }
       19:  178:    result=adder(vector_index, size);
       19:  179:    result=subtracter(vector_index, size, result);
       19:  180:    if (result<=0) {//impede erros variados não detectados por outras partes em que o resultado é menor que zero
    #####:  181:      printf("Erro: string invalida\n");
    #####:  182:      return -1;
        -:  183:    }
       19:  184:    printf("%d\n", result);
       19:  185:    return result;
        -:  186:  }
        -:  187:  return 0;
        -:  188:}
